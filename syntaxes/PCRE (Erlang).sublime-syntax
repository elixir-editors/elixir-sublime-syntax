%YAML 1.2
---
name: PCRE (Erlang)
scope: source.pcree
file_extensions: [pcree]
hidden: true
comment: Perl Compatible Regular Expressions with a focus on Erlang (http://erlang.org/doc/man/re.html)
authors: [Aziz KÃ¶ksal <aziz.koeksal@gmail.com>]

variables:
  character_quantifier: '[?*+]'
  lazy_or_possessive: '[?+]'
  ranged_quantifier: '{\d+,?\d*?}'
  capture_name: '[a-zA-Z_][a-zA-Z_\d]{,31}'
  invalid_capture_name: '[^\[\\(){}|^$.?*+\n]+'

contexts:
  main:
    - include: unexpected_quantifier
    - match: (?=.|\n)
      push: expression

  expression:
    - include: quoted_sequence
    - include: subroutine_call
    - include: back_reference
    - include: assertion
    - include: comment
    - include: escape_sequence
    - include: class_set
    - include: inline_option
    - include: backtracking_verb
    - include: group
    - include: operator
    - include: quantifier
    - include: dot_meta_char
    - include: literal

  quoted_sequence:
    - match: \\Q
      scope: keyword.control.quote.pcree punctuation.definition.quote.begin.pcree
      push:
        - meta_scope: meta.quote.pcree
        - match: \\E
          scope: keyword.control.quote.pcree punctuation.definition.quote.end.pcree
          pop: true
        - include: literal

  subroutine_call:
    - match: |-
        (?x)
        \\g(?:
          <( ((?>-[1-9]\d*|\d+) | {{capture_name}}) | \g<-1>?({{invalid_capture_name}}) )> | '\g<1>' |
          (<({{invalid_capture_name}}*)>? | '\g<-1>'?) )
      scope: keyword.other.subroutine.pcree
      captures:
        1: ''
        2: variable.other.subroutine.pcree
        3: invalid.illegal.subroutine.pcree
        4: invalid.illegal.subroutine.pcree
        5: invalid.illegal.subroutine.pcree
        6: invalid.illegal.subroutine.pcree
    - match: |-
        (?x)
        \(\?(?:
          ([+-]?\d+|R|(?:P>|&){{capture_name}})\) |
          (?:P>|&)({{invalid_capture_name}})\)? |
          (R|P>|&)\)? )
      scope: keyword.other.subroutine.pcree
      captures:
        1: variable.other.subroutine.pcree
        2: invalid.illegal.subroutine.pcree
        3: invalid.illegal.subroutine.pcree

  back_reference:
    - match: \\(?!0\d)\d+
      scope: keyword.other.back-reference.pcree
    - match: |-
        (?x)
        \\g(?:
          (-?[1-9]\d*) |
          {((?:-?[1-9]\d*|{{capture_name}}))} |
          {\g<-1>?({{invalid_capture_name}})} |
          ({{{invalid_capture_name}}*}?|-?0) ) |
        (\\g)
      scope: keyword.other.back-reference.pcree
      captures:
        1: variable.other.back-reference.pcree
        2: variable.other.back-reference.pcree
        3: invalid.illegal.back-reference.pcree
        4: invalid.illegal.back-reference.pcree
        5: invalid.illegal.back-reference.pcree
    - match: (?x) \(\?P=({{capture_name}})\) | \(\?(P=)\) | \(\?P=({{invalid_capture_name}})\)? | \(\?(P=)
      scope: keyword.other.back-reference.pcree
      captures:
        1: variable.other.back-reference.pcree
        2: invalid.illegal.back-reference.pcree
        3: invalid.illegal.back-reference.pcree
        4: invalid.illegal.back-reference.pcree
    - match: |-
        (?x)
        \\k(?:
          {(?<name> ({{capture_name}}) | \g<-1>?({{invalid_capture_name}}) )} | <\g<name>> | '\g<name>' |
          ({({{invalid_capture_name}}*)}? | <\g<-1>>? | '\g<-1>'?) ) |
        (\\k)
      scope: keyword.other.back-reference.pcree
      captures:
        1: '' # Ignore (?<name>)
        2: variable.other.back-reference.pcree
        3: invalid.illegal.back-reference.pcree
        4: invalid.illegal.back-reference.pcree
        5: invalid.illegal.back-reference.pcree
        6: invalid.illegal.back-reference.pcree

  common_escape_sequence:
    - match: \\(?i)[dhsvw]
      scope: constant.other.escape-sequence.pcree
    - include: character_property
    - include: escaped_char

  character_property:
    - match: \\[pP]{\^?(?>C[cfnos]?|L[&lmotu]?|M[cen]?|N[dlo]?|P[cdefios]?|S[ckmo]?|Z[lps]?|X(?>an|ps|sp|wd|uc))}
      scope: constant.other.escape-sequence.general-category.pcree
    - match: \\[pP][CLMNPSZ]
      scope: constant.other.escape-sequence.general-category.pcree
    - match: \\[pP]{[[:alpha:]]+}
      scope: constant.other.escape-sequence.script-name.pcree
    - match: \\[pP](?:({})|{({{invalid_capture_name}}*)}?)|(\\[pP])
      scope: constant.other.escape-sequence.general-category.pcree
      captures:
        1: invalid.illegal.general-category.pcree
        2: invalid.illegal.general-category.pcree
        3: invalid.illegal.general-category.pcree

  # Outside character class.
  escape_sequence:
    - match: \\K
      scope: constant.character.escape.match-reset.pcree
      push: unexpected_quantifier_pop
    - match: \\R
      scope: constant.character.escape.unicode-newline.pcree
    - match: \\X
      scope: constant.character.escape.extended-grapheme-cluster.pcree
    - include: common_escape_sequence

  operator:
    - match: \|
      scope: keyword.operator.alternation.pcree
      push: unexpected_quantifier_pop

  assertion:
    - match: \^
      scope: keyword.control.anchor.line-begin.pcree
      push: unexpected_quantifier_pop
    - match: \$
      scope: keyword.control.anchor.line-end.pcree
      push: unexpected_quantifier_pop
      # Simple assertions.
    - match: \\[bBAzZG]
      scope: keyword.control.anchor.simple.pcree
      push: unexpected_quantifier_pop

  escaped_char:
    - match: \\{{character_quantifier}}
      scope: constant.character.escape.quantifier.pcree
    - match: \\\.
      scope: constant.character.escape.dot.pcree
    - match: \\x\h\h|(\\x(?!{))|(?>\\x(?>{\h+}|{(?>\h|([^}]))+}|({}?)|))
      scope: constant.character.escape.hex.pcree
      captures:
        1: invalid.illegal.escape.hex.pcree
        2: invalid.illegal.escape.hex.pcree
        3: invalid.illegal.escape.hex.pcree
    - match: \\0[0-7]{1,2}
      scope: constant.character.escape.octal.pcree
    - match: (\\o(?!{))|(?>\\o(?>{[0-7]+}|{(?>[0-7]|([^}]))+}|({}?)|))
      scope: constant.character.escape.octal.pcree
      captures:
        1: invalid.illegal.escape.octal.pcree
        2: invalid.illegal.escape.octal.pcree
        3: invalid.illegal.escape.octal.pcree
    - match: \\c
      scope: constant.character.escape.ascii.pcree
      push:
        - match: \p{ascii}|(.?)
          scope: constant.character.escape.ascii.pcree
          captures:
            1: invalid.illegal.escape.ascii.pcree
          pop: true
    - match: \\[aefnrt]
      scope: constant.character.escape.non-printable.pcree
    - match: \\.
      scope: constant.character.escape.pcree

  inline_option:
    - match: (\(\*)((?>NO_START_OPT|UTF8?|UCP|CRLF|CR|LF|ANYCRLF|ANY|BSR_ANYCRLF|BSR_UNICODE|LIMIT_(?>MATCH|RECURSION)=))
      captures:
        1: punctuation.definition.annotation.begin.pcree
        2: storage.modifier.mode.letter.pcree
      push:
        - meta_scope: keyword.control.flag.pcree
        - match: (?<==)\d+
          scope: constant.numeric.integer.decimal.pcree
        - match: '[^)]+'
          scope: invalid.illegal.inline-option.pcree
        - match: \)
          scope: punctuation.definition.annotation.end.pcree
          set: unexpected_quantifier_pop

  backtracking_verb:
    - match: \(\*(?=[a-zA-Z:])
      scope: punctuation.definition.annotation.begin.pcree
      push:
        - meta_scope: meta.backtracking.pcree
        - match: ((?>ACCEPT|COMMIT|FAIL|F))(:?)
          captures:
            1: keyword.control.verb.pcree
            2: punctuation.separator.sequence.pcree
          set: backtracking_verb_end
        - match: MARK(?=:\))
          scope: keyword.control.verb.pcree
          set: backtracking_verb_end
        - match: (?>MARK|THEN|PRUNE|SKIP|(?=:[^)]))
          scope: keyword.control.verb.pcree
          set:
            - match: ':'
              scope: punctuation.separator.sequence.pcree
              push:
                - meta_scope: meta.backtracking.pcree
                - meta_content_scope: entity.name.constant.pcree
                - match: (?=\))
                  pop: true
            - include: backtracking_verb_end
        - include: backtracking_verb_end

  backtracking_verb_end:
    - match: ''
      set:
        - meta_scope: meta.backtracking.pcree
        - match: '[^)\n]+'
          scope: invalid.illegal.backtracking-verb.pcree
        - match: \)
          scope: punctuation.definition.annotation.end.pcree
          set: unexpected_quantifier_pop

  group:
    - match: \)
      scope: invalid.illegal.unmatched-brace.pcree
      # Comment
    - match: \(\?#
      scope: punctuation.definition.comment.begin.pcree
      push:
        - meta_scope: meta.group.pcree comment.block.group.pcree
        - match: \)
          scope: punctuation.definition.comment.end.pcree
          set: unexpected_quantifier_pop
    - match: \(
      scope: keyword.control.group.pcree punctuation.definition.group.begin.pcree
      push:
        - meta_scope: meta.group.pcree
          # Look-ahead and look-behind.
        - match: \?<?[=!]
          scope: keyword.control.assertion.pcree
          set: [group_body, unexpected_quantifier_pop]
          # Named capture.
        - match: (?x) \? (?>P?<({{capture_name}})> | '\g<-1>' | (P)(?=') | P?(<>|'') | P?<({{invalid_capture_name}}?)> | P?'\g<-1>')
          scope: keyword.other.named-capture-group.pcree
          captures:
            1: entity.name.capture-group.pcree
            2: invalid.illegal.named-capture.pcree
            3: invalid.illegal.named-capture.pcree
            4: invalid.illegal.named-capture.pcree
          set: [group_body, unexpected_quantifier_pop]
          # Atomic group.
        - match: \?>
          scope: keyword.control.atomic-group.pcree
          set: [group_body, unexpected_quantifier_pop]
          # Non-capturing group.
        - match: '\?:'
          scope: keyword.control.non-capturing-group.pcree
          set: [group_body, unexpected_quantifier_pop]
          # Reset/overload group numbers inside.
        - match: \?\|
          scope: keyword.control.reset-numbers-group.pcree
          set: [group_body, unexpected_quantifier_pop]
          # Internal option setting.
        - match: (?x) (\?) ([imsxJUX]+(?:-[imsxJUX]*)? | (?:-[imsxJUX]*)+) (.*?) (:|(?=\)))
          scope: storage.modifier.mode.pcree
          captures:
            1: storage.modifier.mode.question.pcree
            2: storage.modifier.mode.letters.pcree
            3: invalid.illegal.inline-option.pcree
            4: storage.modifier.mode.colon.pcree
          set: [group_body, unexpected_quantifier_pop]
        - match: (?=\?\()
          set: conditional_subpattern_pop
        - match: ''
          set: [group_body, unexpected_quantifier_pop]

  group_body:
    - meta_content_scope: meta.group.pcree
    - match: \)
      scope: meta.group.pcree keyword.control.group.pcree punctuation.definition.group.end.pcree
      pop: true
    - include: expression

  conditional_subpattern_pop:
    - meta_content_scope: meta.group.pcree
    - include: conditional_subpattern
    - match: ''
      pop: true

  conditional_subpattern:
    - match: \?((\()(\)))
      scope: keyword.control.conditional.pcree
      captures:
        1: invalid.illegal.conditional.pcree
        2: punctuation.definition.conditional.begin.pcree
        3: punctuation.definition.conditional.end.pcree
      set: [group_body, unexpected_quantifier_pop]
    - match: \?(\()
      scope: keyword.control.conditional.pcree
      captures:
        1: punctuation.definition.conditional.begin.pcree
      push:
        - meta_scope: meta.conditional.pcree
          # Pseudo-condition called DEFINE.
        - match: DEFINE(?=\))
          scope: keyword.other.conditional.definition.pcree
          set: conditional_subpattern_end
          # References to recursion.
        - match: (R)(?:(&)({{capture_name}})|(\d+)|(?=\)))
          captures:
            1: keyword.operator.recursion.pcree
            2: keyword.operator.recursion.pcree
            3: variable.other.recursion.pcree
            4: variable.other.recursion.pcree
          set: conditional_subpattern_end
          # References to subpatterns.
        - match: <({{capture_name}})>|'\g<-1>'|\g<-1>
          captures:
            1: variable.other.back-reference.pcree
          set: conditional_subpattern_end
          # Assertions: positive or negative lookahead or lookbehind assertion.
        - match: \?<?[=!]
          scope: keyword.control.assertion.pcree
          set:
            - include: unexpected_quantifier
            - match: ''
              set:
                - meta_content_scope: meta.conditional.pcree
                - match: (?=\))
                  set: conditional_subpattern_end
                - include: expression
        - match: ''
          set: conditional_subpattern_end

  conditional_subpattern_end:
    - meta_content_scope: meta.conditional.pcree
    - match: \)
      scope: keyword.control.conditional.pcree punctuation.definition.conditional.end.pcree
      set: [group_body, unexpected_quantifier_pop]
    - match: '[^)]+'
      scope: invalid.illegal.conditional.pcree

  class_set:
    - match: \[:.*?:\]
      scope: invalid.illegal.posix-class.pcree
      set: unexpected_quantifier_pop
    - match: (\[)(\^?)(]?)
      captures:
        1: keyword.control.set.pcree punctuation.definition.set.begin.pcree
        2: keyword.operator.negation.pcree
        3: meta.literal.pcree
      push:
        - meta_scope: meta.set.pcree
        - include: character_range
        - include: posix_character_class
        - include: class_set_escape_sequence
        - match: \]
          scope: keyword.control.set.pcree punctuation.definition.set.end.pcree
          pop: true
        - include: literal

  character_range:
    - match: (?=(\\x\h\h?|\\x{\h+}|\\[0-7]{1,3}|\o{[0-7]+}|\\c\p{ascii}|\\.|[^\\])-(?!])\g<1>)
      push:
        - match: (\\[dsw])|(\\x\h\h?|\\x{\h+}|\\[0-7]{1,3}|\o{[0-7]+}|\\c\p{ascii}|\\.|[^\\])
          scope: meta.character-range.pcree
          captures:
            1: invalid.illegal.range.pcree
            2: constant.other.range.pcree
          set:
            - match: '-'
              scope: keyword.operator.range.pcree
              set:
                - meta_scope: meta.character-range.pcree
                - match: (\\[dsw])|(\\x\h\h?|\\x{\h+}|\\[0-7]{1,3}|\o{[0-7]+}|\\c\p{ascii}|\\.|[^\\])
                  captures:
                    1: invalid.illegal.range.pcree
                    2: constant.other.range.pcree
                  pop: true

  # Escape sequences inside [...]
  class_set_escape_sequence:
    - match: \\N
      scope: invalid.illegal.escape-sequence.pcree
    - match: \\b
      scope: constant.character.escape.backspace.pcree
    # Inside a class set \x, \xh and \xhh are valid sequences.
    - match: \\x\h?\h?
      scope: constant.character.escape.hex.pcree
    - include: common_escape_sequence

  # E.g: [:alpha:] or [:^alpha:]
  posix_character_class:
    - match: \[:[<>]:\]
      scope: invalid.deprecated.word-boundary.pcree
    - match: \[::\]
      scope: invalid.illegal.posix-class.pcree
    # Positive look-ahead for :] because [: can stand alone without being a posix character class.
    # Read as: in-between there may be 0 or more of "\\", "[" not followed by ":", "[" or "]" preceded by a "\",
    # and any other character besides "[", "]".
    - match: (?x) (\[:) (?=(\\\\ | \[(?!:) | (?<=\\)[\[\]] | [^\[\]])*? :])
      scope: keyword.control.set.posix.pcree punctuation.definition.posix-class.begin.pcree
      push:
        - meta_scope: constant.other.set.posix.pcree
        - match: :]
          scope: keyword.control.set.posix.pcree punctuation.definition.posix-class.end.pcree
          pop: true
        - match: (\^?)((?>alnum|alpha|ascii|blank|cntrl|digit|graph|lower|print|punct|space|upper|word|xdigit))
          captures:
            1: keyword.control.set.negation.pcree
            2: constant.other.posix-class.name.pcree
        - match: .+?(?=:])
          scope: invalid.illegal.unknown-posix-class.pcree

  quantifier:
    - match: ({)(\d+)(,)?(\d*)(}){{lazy_or_possessive}}?
      scope: meta.quantifier.pcree keyword.operator.quantifier.pcree
      captures:
        1: punctuation.definition.quantifier.begin.pcree
        2: constant.numeric.quantifier.min.pcree
        3: punctuation.separator.quantifier.pcree
        4: constant.numeric.quantifier.max.pcree
        5: punctuation.definition.quantifier.end.pcree
      push: unexpected_quantifier_pop
    - match: '{{character_quantifier}}{{lazy_or_possessive}}?'
      scope: meta.quantifier.pcree keyword.operator.quantifier.pcree
      push: unexpected_quantifier_pop

  unexpected_quantifier:
    - match: (?>{{character_quantifier}}|{{ranged_quantifier}})+
      scope: invalid.illegal.unexpected-quantifier.pcree

  unexpected_quantifier_pop:
    - include: unexpected_quantifier
    - match: ''
      pop: true

  dot_meta_char:
    - match: \.
      scope: keyword.other.any.pcree

  comment:
    - match: '(?=(\\{2})*\\ #)'
      push:
        - include: escape_sequence
        - match: '#'
          scope: meta.literal.pcree
          pop: true
    - match: (?<=\s)#
      push:
        - meta_scope: comment.line.number-sign.pcree
        - match: \n
          pop: true

  literal:
    - match: .|\n
      scope: meta.literal.pcree
