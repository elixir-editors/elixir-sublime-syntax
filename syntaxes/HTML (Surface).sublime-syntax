%YAML 1.2
---
version: 2
name: HTML (Surface)
scope: text.html.surface
extends: Packages/HTML/HTML.sublime-syntax

file_extensions: [sface]
authors:
  - Aziz KÃ¶ksal <aziz.koeksal@gmail.com>
  - deathaxe <https://github.com/deathaxe>

variables:
  html_custom_tag_char: '[^ \n"''/=<>\x{7F}-\x{9F}]'
  surface_tag_char: '[^ \n."''/=<>\x{7F}-\x{9F}]'
  surface_tag_name: '[a-zA-Z]{{surface_tag_char}}*'
  surface_upcase_tag_name: '[A-Z]{{surface_tag_char}}*'

contexts:
  # HTML overrides:

  tag-other:
    - include: surface-markdown-tag
    - include: surface-raw-tag
    - include: surface-other-tags
    - include: html-custom-tags
    - include: surface-blocks
    - include: surface-comment
    - include: elixir-embedded

  tag-attributes:
    - meta_prepend: true
    - include: surface-attributes
    - include: elixir-embedded
    - match: (?=[^{{ascii_space}}=/>]+\s*=\s*{)
      push:
        - tag-generic-attribute-meta
        - tag-generic-attribute-assignment
        - tag-generic-attribute-name

  tag-generic-attribute-value:
    - meta_prepend: true
    - include: HTML (HEEx).sublime-syntax#elixir-embedded-pop

  # Surface:

  surface-markdown-tag:
    # NB: the #Markdown-tag cannot be nested, e.g.: `<#Markdown><#Markdown></#Markdown></#Markdown>`
    - match: (<)(#Markdown)\b
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.begin.surface
      push: surface-markdown-tag-content-pop

  surface-markdown-tag-content-pop:
    - meta_scope: meta.tag.other.surface
    - match: \>
      scope: punctuation.definition.tag.end.html
      set: surface-markdown-body-pop
    - include: tag-end-self-closing
    - include: tag-attributes

  surface-markdown-body-pop:
    - match: (</)(#Markdown)\b
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.end.surface
      set: surface-end-tag-content-pop

    # # NB: commented out because Markdown is not really highlighted correctly
    # #     due to the surrounding indentation.
    # - match: ''
    #   embed: scope:text.html.markdown
    #   escape: (?=</#Markdown\b)

    # At least highlight basic HTML.
    - include: scope:text.html.basic
      apply_prototype: true

  surface-raw-tag:
    # NB: the #Raw-tag cannot be nested, e.g.: `<#Raw><#Raw></#Raw></#Raw>`
    - match: (<)(#Raw)(>)
      captures:
        0: meta.tag.other.surface
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.begin.surface
        3: punctuation.definition.tag.end.html
      push: surface-raw-body-pop

  surface-raw-body-pop:
    - match: (</)(#Raw)\b
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.end.surface
      set: surface-end-tag-content-pop

    - include: scope:text.html.basic
      apply_prototype: true

  surface-other-tags:
    - match: (<)([#:]{{surface_tag_name}}|{{surface_upcase_tag_name}})
      captures:
        1: punctuation.definition.tag.begin.surface
        2: entity.name.tag.begin.surface
      push: [surface-begin-tag-content-pop, surface-begin-tag-name-pop]

    - match: (</)([#:]{{surface_tag_name}}|{{surface_upcase_tag_name}})
      captures:
        1: punctuation.definition.tag.begin.surface
        2: entity.name.tag.end.surface
      push: [surface-end-tag-content-pop, surface-end-tag-name-pop]

  html-custom-tags:
    - match: (<)({{html_custom_tag_char}}+)
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.begin.html
      push: surface-begin-tag-content-pop

    - match: (</)({{html_custom_tag_char}}+)
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.end.html
      push: surface-end-tag-content-pop

  surface-begin-tag-content-pop:
    - meta_scope: meta.tag.other.surface
    - include: tag-end-maybe-self-closing
    - include: tag-attributes

  surface-end-tag-content-pop:
    - meta_scope: meta.tag.other.surface
    - include: tag-end
    - include: else-pop

  surface-begin-tag-name-pop:
    - match: '{{surface_upcase_tag_name}}'
      scope: entity.name.tag.begin.surface
    - include: surface-tag-name-common-pop

  surface-end-tag-name-pop:
    - match: '{{surface_upcase_tag_name}}'
      scope: entity.name.tag.end.surface
    - include: surface-tag-name-common-pop

  surface-tag-name-common-pop:
    - match: '[[:lower:]_]\w*[?!]?'
      scope: variable.function.surface
      pop: 1
    - match: \.
      scope: punctuation.accessor.dot.surface
    - include: immediately-pop

  surface-attributes:
    - match: |-
        (?x)
        (:)(
          if | hook | show | let | args | values
        | on-(?:
            click | capture-click | blur | focus | change | submit | keydown | keyup
          | window-(?:focus | blur | keydown | keyup)
          )
        ){{attribute_name_break}}
      captures:
        1: punctuation.definition.attribute.begin.surface
        2: entity.other.attribute-name.surface
      push: [tag-generic-attribute-meta, tag-generic-attribute-assignment]

  surface-blocks:
    - match: ({/)(?:(case|elseif|else|if|unless)|(for)|([a-z]+))(})
      captures:
        0: meta.embedded.surface
        1: punctuation.section.embedded.begin.surface
        2: keyword.control.conditional.surface
        3: keyword.control.loop.surface
        4: keyword.control.surface
        5: punctuation.section.embedded.end.surface
    - match: ({#)(match)\b
      captures:
        1: punctuation.section.embedded.begin.surface
        2: keyword.control.conditional.surface
      push: surface-match-block-content-pop
    - match: ({#)(?:(case|elseif|else|if|unless)|(for)|([a-z]+))\b
      captures:
        1: punctuation.section.embedded.begin.surface
        2: keyword.control.conditional.surface
        3: keyword.control.loop.surface
        4: keyword.control.surface
      push: surface-conditional-block-content-pop

  surface-conditional-block-content-pop:
    - meta_scope: meta.embedded.surface
    - meta_content_scope: source.elixir.embedded.html
    - include: surface-block-end-pop
    - include: scope:source.elixir#arguments_ws
      apply_prototype: true

  surface-match-block-content-pop:
    - meta_scope: meta.embedded.surface
    - meta_content_scope: source.elixir.embedded.html
    - include: surface-block-end-pop
    - include: scope:source.elixir#parameters
      apply_prototype: true

  surface-block-end-pop:
    - match: \}
      scope: punctuation.section.embedded.end.surface
      pop: 1

  surface-comment:
    - match: '{!--'
      scope: punctuation.definition.comment.begin.surface
      push: surface-comment-content-pop

  surface-comment-content-pop:
    - meta_scope: meta.embedded.surface comment.block.surface
    - match: --}
      scope: punctuation.definition.comment.end.surface
      pop: 1

  # Elixir:

  elixir-embedded:
    - include: HTML (HEEx).sublime-syntax#elixir-embedded
