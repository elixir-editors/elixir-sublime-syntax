%YAML 1.2
---
version: 2
name: HTML (HEEx)
scope: text.html.heex
extends: Packages/HTML/HTML.sublime-syntax

file_extensions: [heex]
authors: [Aziz KÃ¶ksal <aziz.koeksal@gmail.com>]

variables:
  tag_char: (?:[^ \n."'/=<>\x{7F}-\x{9F}])
  upcase_tag_name: '[A-Z]{{tag_char}}*'

contexts:
  # HTML overrides:

  tag:
    - meta_prepend: true
    - include: heex-html-tag
    - include: heex-tag

  tag-other-name:
    - meta_prepend: true
    - include: elixir-interpolated

  tag-attributes:
    - meta_prepend: true
    - include: elixir-interpolated

  tag-attribute-value-content:
    - meta_prepend: true
    - include: elixir-interpolated

  strings-common-content:
    - meta_prepend: true
    - include: elixir-interpolated

  comment-content:
    - meta_prepend: true
    - include: elixir-interpolated

  # HEEx:

  heex-html-tag:
    - match: (<)(?>(?=\.)|({{upcase_tag_name}}))
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.begin.heex
      push: [heex-begin-tag-rest-pop, heex-begin-tag-name-rest-pop]

    - match: (</)(?>(?=\.)|({{upcase_tag_name}}))
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.end.heex
      push: [heex-end-tag-rest-pop, heex-end-tag-name-rest-pop]

  heex-begin-tag-rest-pop:
    - match: /?>
      scope: punctuation.definition.tag.end.html
      pop: 1
    - include: tag-attributes
      apply_prototype: true

  heex-end-tag-rest-pop:
    - match: \>|(?=\S)
      scope: punctuation.definition.tag.end.html
      pop: 1

  heex-begin-tag-name-rest-pop:
    - match: \.
      scope: punctuation.accessor.dot.heex
      push:
        - match: (?>[[:lower:]_]\w*+[?!]?+)
          scope: variable.function.heex
          pop: 2
        - match: '{{upcase_tag_name}}|(?=\S)'
          scope: entity.name.tag.begin.heex
          pop: 1
    - match: (?=\S)
      pop: 1

  heex-end-tag-name-rest-pop:
    - match: \.
      scope: punctuation.accessor.dot.heex
      push:
        - match: (?>[[:lower:]_]\w*+[?!]?+)
          scope: variable.function.heex
          pop: 2
        - match: '{{upcase_tag_name}}|(?=\S)'
          scope: entity.name.tag.end.heex
          pop: 1
    - match: (?=\S)
      pop: 1

  heex-tag:
    - match: <%#
      scope: punctuation.definition.comment.begin.eex
      push:
        - meta_scope: text.html.eex comment.block.eex
        - match: '%>'
          scope: punctuation.definition.comment.end.eex
          pop: 1

    # - match: (<)(%%=)
    #   captures:
    #     1: punctuation.section.embedded.begin.eex
    #     2: entity.name.tag.eex
    #   push:
    #     - meta_scope: meta.interpolation.eex text.html.eex
    #     - clear_scopes: 1
    #     - include: heex-closing-tag-punctuation-pop
    #     - include: scope:source.elixir.eex
    #       apply_prototype: true

    # Tags <%/ and <%| are parsed but have no functionality in EEx yet.
    - match: (<)(%(?>%=?|[=/|]?))
      captures:
        1: punctuation.section.embedded.begin.eex
        2: entity.name.tag.eex
      push:
        - meta_scope: meta.interpolation.eex text.html.eex
        - clear_scopes: 1
        - include: heex-closing-tag-punctuation-pop
        - include: scope:source.elixir
          apply_prototype: true

  heex-closing-tag-punctuation-pop:
    - match: (%)(>)
      scope: text.html.eex
      captures:
        1: entity.name.tag.eex
        2: punctuation.section.embedded.end.eex
      pop: 1

  # Elixir:

  elixir-interpolated:
    - match: \{
      scope: punctuation.section.interpolation.begin.elixir
      push:
        - clear_scopes: 1
        - meta_scope: meta.interpolation.html source.elixir.interpolated.html
        - match: \}
          scope: punctuation.section.interpolation.end.elixir
          pop: 1
        - include: scope:source.elixir
          apply_prototype: true
