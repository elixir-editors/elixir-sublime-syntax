# SYNTAX TEST "Elixir (EEx).sublime-syntax"

# EEx inside Elixir code

[
<%= if @ecto do %>
#      ^ keyword.operator.attribute
  :ecto,
<% end %><%= if @html do %>
#  ^^^ keyword.context.block.end
#            ^^ keyword.control.conditional
  :html
<% end %>
#  ^^^ keyword.context.block.end
]
#<- -invalid

defmodule <%= @module %>.View do
#                        ^^^^ entity.name.namespace
#                       ^ punctuation.accessor.dot
#                     ^^ punctuation.section.embedded.end.eex
#             ^ keyword.operator.attribute
#         ^^^ punctuation.section.embedded.begin.eex
end

alias <%= @web_namespace %>.Router.Helpers, as: Routes
#                                               ^^^^^^ entity.name.namespace
#                          ^ punctuation.accessor.dot
#     ^^^ punctuation.section.embedded.begin.eex

:<%= @key %>
#<- constant.other.symbol punctuation.definition.constant.begin
<%= @key %>:
#          ^ constant.other.keyword punctuation.definition.constant.end
<%= @key %>_atom:
#               ^ punctuation.definition.constant.end
#          ^^^^^^ constant.other.keyword


# NB: due to the workaround in the syntax file EEx tags
#     are also highlighted inside strings.
# FIXME: make negative check with "-entity" when solved.
"<%= string %>"
#           ^^ punctuation.section.embedded.end.eex
#^^^ punctuation.section.embedded.begin.eex

M1.<%= M2 %>.f()
#              ^ punctuation.section.arguments.end
#             ^ punctuation.section.arguments.begin
#            ^ variable.function
#           ^ punctuation.accessor.dot
#         ^^ punctuation.section.embedded.end.eex
#      ^^ constant.other.module
#  ^^^ punctuation.section.embedded.begin.eex
# ^ punctuation.accessor.dot

x.<%= :member %>()
#                ^ punctuation.section.arguments.end
#               ^ punctuation.section.arguments.begin
#             ^^ punctuation.section.embedded.end.eex
#     ^^^^^^^ constant.other.symbol
# ^^^ punctuation.section.embedded.begin.eex
#^ punctuation.accessor.dot
                 ^ punctuation.section.arguments.end
                ^ punctuation.section.arguments.begin

@type <%= :t %> :: any
#            ^^ punctuation.section.embedded.end.eex
#     ^^^ punctuation.section.embedded.begin.eex
                   ^^^ support.type

@spec <%= :name %>(any)
#                  ^^^ support.type
#               ^^ punctuation.section.embedded.end.eex
#     ^^^ punctuation.section.embedded.begin.eex
                      ^ punctuation.definition.parameters.end
                  ^ punctuation.definition.parameters.begin

 &<%= %>
#     ^^ punctuation.section.embedded.end.eex
# ^^^ punctuation.section.embedded.begin.eex
#^ keyword.operator.capture

# <%= @web_app_name %>
#                   ^^ punctuation.section.embedded.end.eex
# ^^^ punctuation.section.embedded.begin.eex
#^^^^^^^^^^^^^^^^^^^^^^ comment.line.number-sign.elixir
#<- comment.line.number-sign.elixir punctuation.definition.comment.elixir
